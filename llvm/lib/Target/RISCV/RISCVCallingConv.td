//===-- RISCVCallingConv.td - Calling Conventions RISCV ----*- tablegen -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This describes the calling conventions for the RISCV architecture.
//
//===----------------------------------------------------------------------===//

// The RISC-V calling convention is handled with custom code in
// RISCVISelLowering.cpp (CC_RISCV).

def CSR_ILP32_LP64
    : CalleeSavedRegs<(add X1, X3, X4, X8, X9, (sequence "X%u", 18, 27))>;

def CSR_ILP32F_LP64F
    : CalleeSavedRegs<(add CSR_ILP32_LP64,
                       F8_F, F9_F, (sequence "F%u_F", 18, 27))>;

def CSR_ILP32D_LP64D
    : CalleeSavedRegs<(add CSR_ILP32_LP64,
                       F8_D, F9_D, (sequence "F%u_D", 18, 27))>;

def CSR_IL32PC64_L64PC128
    : CalleeSavedRegs<(add X1, X3, X4, X8, X9, (sequence "X%u", 18, 27),
                           C1, C3, C4, C8, C9, (sequence "C%u", 18, 27))>;

def CSR_IL32PC64F_L64PC128F
    : CalleeSavedRegs<(add CSR_IL32PC64_L64PC128,
                       F8_F, F9_F, (sequence "F%u_F", 18, 27))>;

def CSR_IL32PC64D_L64PC128D
    : CalleeSavedRegs<(add CSR_IL32PC64_L64PC128,
                       F8_D, F9_D, (sequence "F%u_D", 18, 27))>;

// Needed for implementation of RISCVRegisterInfo::getNoPreservedMask()
def CSR_NoRegs : CalleeSavedRegs<(add)>;

def CSR_CHERI_Uninit : CalleeSavedRegs<(add X1, C1)>;

// Interrupt handler needs to save/restore all registers that are used,
// both Caller and Callee saved registers.
def CSR_Interrupt : CalleeSavedRegs<(add X1,
    (sequence "X%u", 3, 9),
    (sequence "X%u", 10, 11),
    (sequence "X%u", 12, 17),
    (sequence "X%u", 18, 27),
    (sequence "X%u", 28, 31))>;

// Same as CSR_Interrupt, but including all 32-bit FP registers.
def CSR_XLEN_F32_Interrupt: CalleeSavedRegs<(add X1,
    (sequence "X%u", 3, 9),
    (sequence "X%u", 10, 11),
    (sequence "X%u", 12, 17),
    (sequence "X%u", 18, 27),
    (sequence "X%u", 28, 31),
    (sequence "F%u_F", 0, 7),
    (sequence "F%u_F", 10, 11),
    (sequence "F%u_F", 12, 17),
    (sequence "F%u_F", 28, 31),
    (sequence "F%u_F", 8, 9),
    (sequence "F%u_F", 18, 27))>;

// Same as CSR_Interrupt, but including all 64-bit FP registers.
def CSR_XLEN_F64_Interrupt: CalleeSavedRegs<(add X1,
    (sequence "X%u", 3, 9),
    (sequence "X%u", 10, 11),
    (sequence "X%u", 12, 17),
    (sequence "X%u", 18, 27),
    (sequence "X%u", 28, 31),
    (sequence "F%u_D", 0, 7),
    (sequence "F%u_D", 10, 11),
    (sequence "F%u_D", 12, 17),
    (sequence "F%u_D", 28, 31),
    (sequence "F%u_D", 8, 9),
    (sequence "F%u_D", 18, 27))>;

// Same as CSR_Interrupt, but including all capability registers that are used,
// both Caller and Callee saved registers.
def CSR_XLEN_CLEN_Interrupt : CalleeSavedRegs<(add X1,
    (sequence "X%u", 3, 9),
    (sequence "X%u", 10, 11),
    (sequence "X%u", 12, 17),
    (sequence "X%u", 18, 27),
    (sequence "X%u", 28, 31),
    C1,
    (sequence "C%u", 3, 9),
    (sequence "C%u", 10, 11),
    (sequence "C%u", 12, 17),
    (sequence "C%u", 18, 27),
    (sequence "C%u", 28, 31))>;

// Same as CSR_XLEN_CLEN_Interrupt, but including all 32-bit FP registers.
def CSR_XLEN_CLEN_F32_Interrupt: CalleeSavedRegs<(add X1,
    (sequence "X%u", 3, 9),
    (sequence "X%u", 10, 11),
    (sequence "X%u", 12, 17),
    (sequence "X%u", 18, 27),
    (sequence "X%u", 28, 31),
    C1,
    (sequence "C%u", 3, 9),
    (sequence "C%u", 10, 11),
    (sequence "C%u", 12, 17),
    (sequence "C%u", 18, 27),
    (sequence "C%u", 28, 31),
    (sequence "F%u_F", 0, 7),
    (sequence "F%u_F", 10, 11),
    (sequence "F%u_F", 12, 17),
    (sequence "F%u_F", 28, 31),
    (sequence "F%u_F", 8, 9),
    (sequence "F%u_F", 18, 27))>;

// Same as CSR_XLEN_CLEN_Interrupt, but including all 64-bit FP registers.
def CSR_XLEN_CLEN_F64_Interrupt: CalleeSavedRegs<(add X1,
    (sequence "X%u", 3, 9),
    (sequence "X%u", 10, 11),
    (sequence "X%u", 12, 17),
    (sequence "X%u", 18, 27),
    (sequence "X%u", 28, 31),
    C1,
    (sequence "C%u", 3, 9),
    (sequence "C%u", 10, 11),
    (sequence "C%u", 12, 17),
    (sequence "C%u", 18, 27),
    (sequence "C%u", 28, 31),
    (sequence "F%u_D", 0, 7),
    (sequence "F%u_D", 10, 11),
    (sequence "F%u_D", 12, 17),
    (sequence "F%u_D", 28, 31),
    (sequence "F%u_D", 8, 9),
    (sequence "F%u_D", 18, 27))>;
